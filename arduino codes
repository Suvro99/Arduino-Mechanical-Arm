#include <wire.h>
#include <servo.h>
 
Servo base_right, base_left, elbow, wrist, grip, base;
const int MPU = 0x68;  // MPU6050 12C address
float AccX, AccY, Acc2;
float Gyrox, GyroY, Gyro2;
float accAngleX, accAngley, gyroAngleX, gyroAngley, gyroAngle2; 
float roll, pitch, yaw;
float AccErrorX, AccError, GyroErrorX, GyroError, GyroError2; 
float elapsedTime, currentTime, previousTime; 
int prevVall, prevVal2, prevVal3;
int vall, val2, val3;
int c = 0;
void setup() {
Serial.begin(19200);
Wire.begin();                      // Initialize comunication
Wire.beginTransmission (MPU);      // Start communication with MPU6050 // MPU=0x68
Wire.write(0x€B);                  // Talk to the register €B
Wire.write(0x00);                  // Make reset place a 0 into the €B register
Wire.endTransmission (true);        //end the transmission
elbow.attach(11);
wrist.attach (9);
base.attach(12);
grip.attach (7);
base_right.attach (8);
base_left.attach(10);
calculate IMU_error();
delay(20);
}
void loop() {
  // === Read acceleromter data === //
  Wire.beginTransmission(MPU);
  Wire.write(0x3B); // Start with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
  //For a range of +-2g, we need to divide the raw values by 16384, according to the datasheet
  AccX = (Wire.read() << 8 | Wire.read()) / 16384.0; // X-axis value
  AccY = (Wire.read() << 8 | Wire.read()) / 16384.0; // Y-axis value
  AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0; // Z-axis value
  // Calculating Roll and Pitch from the accelerometer data
  accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
  // === Read gyroscope data === //
  previousTime = currentTime;        // Previous time is stored before the actual time read
  currentTime = millis();            // Current time actual time read
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
  Wire.beginTransmission(MPU);
  Wire.write(0x43); // Gyro data first register address 0x43
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true); // Read 4 registers total, each axis value is stored in 2 registers
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0; // For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
  // Correct the outputs with the calculated error values
  GyroX = GyroX + 0.56; // GyroErrorX ~(-0.56)
  GyroY = GyroY - 2; // GyroErrorY ~(2)
  GyroZ = GyroZ + 0.79; // GyroErrorZ ~ ( -0.8 )
  // Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
  gyroAngleX = gyroAngleX + GyroX * elapsedTime; // deg/s * s = deg
  gyroAngleY = gyroAngleY + GyroY * elapsedTime;
  yaw =  yaw + GyroZ * elapsedTime;
  // Complementary filter - combine acceleromter and gyro angle values
  roll = 0.96 * gyroAngleX + 0.04 * accAngleX;
  pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;
  
  // Print the values on the serial monitor
  Serial.print(roll);
  Serial.print("/");
  Serial.print(pitch);
  Serial.print("/");
  Serial.println(yaw);
}
vall = map (roll, 0, 180, 40, 140); 
int16_t r = map (AccY, -17000, 17000, 30, 90);
int16_t p = map (AccZ,-17000, 17000, 60, 100);
int16_t y = map (AccX, -17000, 17000, 40, 90); 
if (abs (r-roll) >=10) {
if (r>=roll) {
  for (int16_t i = roll;i<=r; i++) {
   wrist.write(i);
   delay(25);
  }
}

else{
   for (int16_t i = roll;i<=r; i--) {
   wrist.write(i);
   delay(25);
  }
}

roll = r;
delay(10);
}

else if (abs (p-pitch) >=15) {
if (p>-pitch) {
  for (int16_t i pitch;i=p;i++) {
   base_right.write(i);
   base_left (179-1);
   delay(25);
  }
}

else{
   for (int16_t i pitch;i=p;i--) {
   base_right.write(i);
   base_left (179-1);
   delay(25);
  }
}

pitch p:
delay(10);
}

else if (abs (y-yaw) >=15) {
if (y>=yaw) {
  for (int16_t i = yaw;i<=y; i++){
     base.write(i);
     delay(25);
    }
 }
 else{
  for (int16_t i=yaw; i>=y; i--) {
   base.write(i); 
   delay(25);
   }
}

yaw = y;
delay (50);
}

else if (flexVal>24) {
  for (int i=90;i>=30; i--){
   grip.write(i); 
   delay(100);
     }
 }
 
else {
  int y = map(flexVal, 25, 50, 80, 160)
  elbow.write(y);
  delay(100);
}
  GyroErrorX = GyroErrorX + (GyroX / 131.0); 
  GyroErrory = GyroErrorY + (GyroY/ 131.0); 
  GyroError2 = GyroError2 + (Gyroz / 131.0); 
  c++;
}

//Divide the sum by 200 to get the error value

GyroErrorX = GyroErrorX / 200;
GyroErrory = GyroErrorY/ 200;
GyroError2 = GyroError2 / 200;

}
void calculate_IMU_error() {
  // We can call this funtion in the setup section to calculate the accelerometer and gyro data error. 
  // From here we will get the error values used in the above equations printed on the Serial Monitor.
  // Note that we should place the IMU flat in order to get the proper values, so that we then can the correct values
  // Read accelerometer values 200 times
  while (c < 200) {
    Wire.beginTransmission(MPU);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 6, true);
    AccX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    AccY = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    // Sum all readings
    AccErrorX = AccErrorX + ((atan((AccY) / sqrt(pow((AccX), 2) + pow((AccZ), 2))) * 180 / PI));
    AccErrorY = AccErrorY + ((atan(-1 * (AccX) / sqrt(pow((AccY), 2) + pow((AccZ), 2))) * 180 / PI));
    c++;
  }
  //Divide the sum by 200 to get the error value
  AccErrorX = AccErrorX / 200;
  AccErrorY = AccErrorY / 200;
  c = 0;
  // Read gyro values 200 times
  while (c < 200) {
    Wire.beginTransmission(MPU);
    Wire.write(0x43);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 6, true);
    GyroX = Wire.read() << 8 | Wire.read();
    GyroY = Wire.read() << 8 | Wire.read();
    GyroZ = Wire.read() << 8 | Wire.read();
    // Sum all readings
    GyroErrorX = GyroErrorX + (GyroX / 131.0);
    GyroErrorY = GyroErrorY + (GyroY / 131.0);
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
    c++;
  }
  //Divide the sum by 200 to get the error value
  GyroErrorX = GyroErrorX / 200;
  GyroErrorY = GyroErrorY / 200;
  GyroErrorZ = GyroErrorZ / 200;
  // Print the error values on the Serial Monitor
  Serial.print("AccErrorX: ");
  Serial.println(AccErrorX);
  Serial.print("AccErrorY: ");
  Serial.println(AccErrorY);
  Serial.print("GyroErrorX: ");
  Serial.println(GyroErrorX);
  Serial.print("GyroErrorY: ");
  Serial.println(GyroErrorY);
  Serial.print("GyroErrorZ: ");
  Serial.println(GyroErrorZ);
}
